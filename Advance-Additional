Advance/Addition Commands

1. GIT CONFIG
git config --global user.name <name>        #Define the author name to be used for all commits by the current user
git config --global user.email <email>      #Define the author email to be used for all commits by the current user.
git config --global alias. <alias-name> <git-command> #Create shortcut for a Git command. E.g. alias.glog “log --graph --oneline” will set ”git glog” equivalent to ”git log --graph --oneline.
git config --system core.editor <editor>    #Set text editor used by commands for all users on the machine. <editor> arg should be the command that launches the desired editor (e.g., vi). 
git config --global --edit                  #Open the global configuration file in a text editor for manual editing.

2. GITLOGS
git log -<limit>                #Limit number of commits by <limit>. E.g. ”git log -5” will limit to 5 commits.
git log --oneline               #Condense each commit to a single line.
git log -p                      #Display the full diff of each commit.
git log --stat                  #Include which files were altered and the relative number of lines that were added or deleted from each of them
git log --author= ”<pattern>”   #Search for commits by a particular author.
git log --grep=”<pattern>”      #Search for commits with a commit message that matches <pattern>.
git log <since>..<until>        #Show commits that occur between <since> and <until>. Args can be a commit ID, branch name, HEAD, or any other kind of revision reference
git log -- <file>               #Only display commits that have the specified file.
git log --graph --decorate      #--graph flag draws a text based graph of commits on left side of commit msgs. --decorate adds names of branches or tags of commits shown

3.GIT DIFF
git diff HEAD               #Show difference between working directory and last commit.
git diff --cached           #Show difference between staged changes and last commit

4.GIT RESET
git reset                 #Reset staging area to match most recent commit, but leave the working directory unchanged.
git reset --hard          #Reset staging area and working directory to match most recent commit and overwrites all changes in the working directory.
git reset <commit>        #Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone.
git reset --hard <commit> #Same as previous, but resets both the staging area & working directory to match. Deletes uncommitted changes, and all commits after <commit>.

5.GIT REBASE
git rebase -i <base>       #Interactively rebase current branch onto <base>. Launches editor to enter commands for how each commit will be transferred to the new base.

6.GIT PULL
git pull --rebase <remote>     #Fetch the remote’s copy of current branch and rebases it into the local copy. Uses git rebase instead of merge to integrate the branches.

7.GIT PUSH
git push <remote> --force       #Forces the git push even if it results in a non-fast-forward merge. Do not use the --force flag unless you’re absolutely sure you know what you’re doing.
git push <remote> --all         #Push all of your local branches to the specified remote.
git push <remote> --tags        #Tags aren’t automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo.
